// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/types/celestia_block_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IntermediateStateRoots struct {
	RawRootsList [][]byte `protobuf:"bytes,1,rep,name=raw_roots_list,json=rawRootsList,proto3" json:"raw_roots_list,omitempty"`
}

func (m *IntermediateStateRoots) Reset()         { *m = IntermediateStateRoots{} }
func (m *IntermediateStateRoots) String() string { return proto.CompactTextString(m) }
func (*IntermediateStateRoots) ProtoMessage()    {}
func (*IntermediateStateRoots) Descriptor() ([]byte, []int) {
	return fileDescriptor_abad81e52b11cce4, []int{0}
}
func (m *IntermediateStateRoots) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntermediateStateRoots) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntermediateStateRoots.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntermediateStateRoots) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntermediateStateRoots.Merge(m, src)
}
func (m *IntermediateStateRoots) XXX_Size() int {
	return m.Size()
}
func (m *IntermediateStateRoots) XXX_DiscardUnknown() {
	xxx_messageInfo_IntermediateStateRoots.DiscardUnknown(m)
}

var xxx_messageInfo_IntermediateStateRoots proto.InternalMessageInfo

func (m *IntermediateStateRoots) GetRawRootsList() [][]byte {
	if m != nil {
		return m.RawRootsList
	}
	return nil
}

type Messages struct {
	MessagesList []*Message `protobuf:"bytes,1,rep,name=messages_list,json=messagesList,proto3" json:"messages_list,omitempty"`
}

func (m *Messages) Reset()         { *m = Messages{} }
func (m *Messages) String() string { return proto.CompactTextString(m) }
func (*Messages) ProtoMessage()    {}
func (*Messages) Descriptor() ([]byte, []int) {
	return fileDescriptor_abad81e52b11cce4, []int{1}
}
func (m *Messages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Messages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Messages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Messages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Messages.Merge(m, src)
}
func (m *Messages) XXX_Size() int {
	return m.Size()
}
func (m *Messages) XXX_DiscardUnknown() {
	xxx_messageInfo_Messages.DiscardUnknown(m)
}

var xxx_messageInfo_Messages proto.InternalMessageInfo

func (m *Messages) GetMessagesList() []*Message {
	if m != nil {
		return m.MessagesList
	}
	return nil
}

type Message struct {
	NamespaceId []byte `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	Data        []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_abad81e52b11cce4, []int{2}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetNamespaceId() []byte {
	if m != nil {
		return m.NamespaceId
	}
	return nil
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*IntermediateStateRoots)(nil), "tendermint.types.IntermediateStateRoots")
	proto.RegisterType((*Messages)(nil), "tendermint.types.Messages")
	proto.RegisterType((*Message)(nil), "tendermint.types.Message")
}

func init() {
	proto.RegisterFile("tendermint/types/celestia_block_data.proto", fileDescriptor_abad81e52b11cce4)
}

var fileDescriptor_abad81e52b11cce4 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x63, 0x40, 0x80, 0xdc, 0x80, 0x90, 0x07, 0x14, 0x18, 0x4c, 0xa9, 0x18, 0x2a, 0x86,
	0x44, 0x82, 0x81, 0xad, 0x42, 0x6c, 0x45, 0x30, 0x10, 0x36, 0x96, 0xc8, 0x89, 0x4f, 0xc5, 0x22,
	0xb1, 0x23, 0xfb, 0xa0, 0xe2, 0x2d, 0x78, 0x2c, 0xc6, 0x8e, 0x8c, 0x28, 0x79, 0x11, 0x54, 0x13,
	0x08, 0x2a, 0xdb, 0xef, 0xbb, 0xef, 0xb3, 0xec, 0x9f, 0x9e, 0x22, 0x68, 0x09, 0xb6, 0x52, 0x1a,
	0x13, 0x7c, 0xad, 0xc1, 0x25, 0x05, 0x94, 0xe0, 0x50, 0x89, 0x2c, 0x2f, 0x4d, 0xf1, 0x94, 0x49,
	0x81, 0x22, 0xae, 0xad, 0x41, 0xc3, 0xf6, 0x7a, 0x36, 0xf6, 0xec, 0xe1, 0xd1, 0x3f, 0x1b, 0x5e,
	0x94, 0x04, 0x5d, 0xc0, 0xb7, 0x32, 0x9a, 0xd0, 0xfd, 0xa9, 0x46, 0xb0, 0x15, 0x48, 0x25, 0x10,
	0xee, 0x51, 0x20, 0xa4, 0xc6, 0xa0, 0x63, 0x27, 0x74, 0xd7, 0x8a, 0x79, 0x66, 0x97, 0x87, 0xac,
	0x54, 0x0e, 0x23, 0x32, 0x5c, 0x1f, 0x87, 0x69, 0x68, 0xc5, 0xdc, 0x13, 0x37, 0xca, 0xe1, 0xe8,
	0x9a, 0x6e, 0xdf, 0x82, 0x73, 0x62, 0x06, 0x8e, 0x4d, 0xe8, 0x4e, 0xd5, 0xe5, 0x5e, 0x18, 0x9c,
	0x1d, 0xc4, 0xab, 0xcf, 0x8a, 0x3b, 0x25, 0x0d, 0x7f, 0x78, 0x7f, 0xd7, 0x25, 0xdd, 0xea, 0x16,
	0xec, 0x98, 0x86, 0x5a, 0x54, 0xe0, 0x6a, 0x51, 0x40, 0xa6, 0x64, 0x44, 0x86, 0x64, 0x1c, 0xa6,
	0x83, 0xdf, 0xd9, 0x54, 0x32, 0x46, 0x37, 0x96, 0x5f, 0x8f, 0xd6, 0xfc, 0xca, 0xe7, 0xab, 0xbb,
	0xf7, 0x86, 0x93, 0x45, 0xc3, 0xc9, 0x67, 0xc3, 0xc9, 0x5b, 0xcb, 0x83, 0x45, 0xcb, 0x83, 0x8f,
	0x96, 0x07, 0x0f, 0x17, 0x33, 0x85, 0x8f, 0xcf, 0x79, 0x5c, 0x98, 0x2a, 0xf9, 0xdb, 0x49, 0x1f,
	0x7d, 0x1f, 0xc9, 0x6a, 0x5f, 0xf9, 0xa6, 0x9f, 0x9f, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xdf,
	0xec, 0xc5, 0x8a, 0x88, 0x01, 0x00, 0x00,
}

func (m *IntermediateStateRoots) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntermediateStateRoots) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntermediateStateRoots) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RawRootsList) > 0 {
		for iNdEx := len(m.RawRootsList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RawRootsList[iNdEx])
			copy(dAtA[i:], m.RawRootsList[iNdEx])
			i = encodeVarintCelestiaBlockData(dAtA, i, uint64(len(m.RawRootsList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Messages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Messages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Messages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessagesList) > 0 {
		for iNdEx := len(m.MessagesList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MessagesList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCelestiaBlockData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCelestiaBlockData(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintCelestiaBlockData(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCelestiaBlockData(dAtA []byte, offset int, v uint64) int {
	offset -= sovCelestiaBlockData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IntermediateStateRoots) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RawRootsList) > 0 {
		for _, b := range m.RawRootsList {
			l = len(b)
			n += 1 + l + sovCelestiaBlockData(uint64(l))
		}
	}
	return n
}

func (m *Messages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MessagesList) > 0 {
		for _, e := range m.MessagesList {
			l = e.Size()
			n += 1 + l + sovCelestiaBlockData(uint64(l))
		}
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovCelestiaBlockData(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCelestiaBlockData(uint64(l))
	}
	return n
}

func sovCelestiaBlockData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCelestiaBlockData(x uint64) (n int) {
	return sovCelestiaBlockData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IntermediateStateRoots) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCelestiaBlockData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntermediateStateRoots: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntermediateStateRoots: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawRootsList", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCelestiaBlockData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCelestiaBlockData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCelestiaBlockData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawRootsList = append(m.RawRootsList, make([]byte, postIndex-iNdEx))
			copy(m.RawRootsList[len(m.RawRootsList)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCelestiaBlockData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCelestiaBlockData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Messages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCelestiaBlockData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Messages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Messages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessagesList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCelestiaBlockData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCelestiaBlockData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCelestiaBlockData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessagesList = append(m.MessagesList, &Message{})
			if err := m.MessagesList[len(m.MessagesList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCelestiaBlockData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCelestiaBlockData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCelestiaBlockData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCelestiaBlockData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCelestiaBlockData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCelestiaBlockData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = append(m.NamespaceId[:0], dAtA[iNdEx:postIndex]...)
			if m.NamespaceId == nil {
				m.NamespaceId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCelestiaBlockData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCelestiaBlockData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCelestiaBlockData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCelestiaBlockData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCelestiaBlockData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCelestiaBlockData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCelestiaBlockData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCelestiaBlockData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCelestiaBlockData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCelestiaBlockData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCelestiaBlockData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCelestiaBlockData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCelestiaBlockData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCelestiaBlockData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCelestiaBlockData = fmt.Errorf("proto: unexpected end of group")
)
